{"ast":null,"code":"var _jsxFileName = \"/Users/pc/Library/Mobile Documents/com~apple~CloudDocs/School/Summer 2022/CSCI 395-48/Assignment 4/Bank-of-React/src/components/Credits.js\";\n// src/components/Credits.js\nimport React, { Component } from 'react'; //import AccountBalance from './AccountBalance';\n////////////////////\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ApiDataComponent extends Component {\n  constructor(props) {\n    // Store received data in state's \"users\" object\n    super(props);\n    this.state = {\n      // Initialize state with an empty users array\n      users: []\n    };\n  } // Make async API call to retrieve data from remote website\n\n\n  async componentDidMount() {\n    let linkToAPI = 'https://jsonplaceholder.typicode.com/users'; // Link to remote website API\n    // Await for promise (completion) returned from API call\n\n    try {\n      // Accept success response as array of JSON objects (users)\n      let response = await axios.get(linkToAPI);\n      console.log(response); // Print out response\n      // To get data object in the response, need to use \"response.data\"\n\n      this.setState({\n        users: response.data\n      }); // Store received data in state's \"users\" object\n    } catch (error) {\n      // Print out errors at console when there is an error response\n      if (error.response) {\n        // The request was made, and the server responded with error message and status code.\n        console.log(error.response.data); // Print out error message (e.g., Not Found)\n\n        console.log(error.response.status); // Print out error status code (e.g., 404)\n      }\n    }\n  }\n\n  render() {\n    // Parse each element in the user JSON array returned from API call\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: this.state.users.map(user => {\n        // Extract \"id\", \"name\", and \"email\" properties of each user JSON array element\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Name \", user.id, \": \", user.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Email: \", user.email]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"------------------------------\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 21\n          }, this)]\n        }, user.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 19\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default ApiDataComponent; ///////////////////\n// class CreditsTracker extends Component {\n//     constructor(props) {\n//       super(props);\n//       this.state = {\n//         error: null,\n//         isLoaded: false,\n//         items: []\n//       };\n//     }\n//     componentDidMount() {\n//       fetch(\"https://moj-api.herokuapp.com/credits\")\n//         .then(res => res.json())\n//         .then(\n//           (result) => {\n//             this.setState({\n//               isLoaded: true,\n//               items: false\n//             });\n//           },\n//           // Note: it's important to handle errors here\n//           // instead of a catch() block so that we don't swallow\n//           // exceptions from actual bugs in components.\n//           (error) => {\n//             this.setState({\n//               isLoaded: true,\n//               error\n//             });\n//           }\n//         )\n//     }\n//     render() {\n//       const { error, isLoaded, items } = this.state;\n//       if (error) {\n//         return <div>Error: {error.message}</div>;\n//       } else if (!isLoaded) {\n//         return <div>Loading...</div>;\n//       } else {\n//         return (\n//           <ul>\n//             <h1>Credits</h1>\n//             {/* {items.map(item => (\n//               <li key={item.id}>\n//                 {item.description} {item.date}\n//               </li>\n//             ))} */}\n//           </ul>\n//         );\n//       }\n//     }\n//   }\n//   export default CreditsTracker;\n//{this.props.accountBalance} = used to keep track of changed account total\n//Add Credit = user input for both description and amount that is put on display\n// Date is based off current time the 'Add Credit' (possible to create 'new Date()' object and track current date with .getMonth()/.getDay(), etc)\n//Date is YYYY/MM/DD\n//Reference:","map":{"version":3,"sources":["/Users/pc/Library/Mobile Documents/com~apple~CloudDocs/School/Summer 2022/CSCI 395-48/Assignment 4/Bank-of-React/src/components/Credits.js"],"names":["React","Component","ApiDataComponent","constructor","props","state","users","componentDidMount","linkToAPI","response","axios","get","console","log","setState","data","error","status","render","map","user","id","name","email"],"mappings":";AAAA;AAEA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B,C,CACA;AAGA;;;;AAEA,MAAMC,gBAAN,SAA+BD,SAA/B,CAAyC;AACrCE,EAAAA,WAAW,CAACC,KAAD,EAAO;AAAG;AACnB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAG;AACdC,MAAAA,KAAK,EAAE;AADI,KAAb;AAGD,GANoC,CAQrC;;;AACuB,QAAjBC,iBAAiB,GAAG;AACxB,QAAIC,SAAS,GAAG,4CAAhB,CADwB,CACuC;AAE/D;;AACA,QAAI;AAAG;AACL,UAAIC,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAN,CAAUH,SAAV,CAArB;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ,EAFE,CAEsB;AACxB;;AACA,WAAKK,QAAL,CAAc;AAACR,QAAAA,KAAK,EAAEG,QAAQ,CAACM;AAAjB,OAAd,EAJE,CAIsC;AACzC,KALD,CAMA,OAAOC,KAAP,EAAc;AAAG;AACf,UAAIA,KAAK,CAACP,QAAV,EAAoB;AAClB;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAYG,KAAK,CAACP,QAAN,CAAeM,IAA3B,EAFkB,CAEiB;;AACnCH,QAAAA,OAAO,CAACC,GAAR,CAAYG,KAAK,CAACP,QAAN,CAAeQ,MAA3B,EAHkB,CAGmB;AACtC;AACF;AACF;;AAEDC,EAAAA,MAAM,GAAG;AAAG;AACV,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,gBAEI,KAAKb,KAAL,CAAWC,KAAX,CAAiBa,GAAjB,CAAuBC,IAAD,IAAU;AAAG;AAC/B,4BACE;AAAA,kCACE;AAAA,gCAAUA,IAAI,CAACC,EAAf,QAAqBD,IAAI,CAACE,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA,kCAAYF,IAAI,CAACG,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA,WAAUH,IAAI,CAACC,EAAf;AAAA;AAAA;AAAA;AAAA,gBADF;AAOD,OARH;AAFJ;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD;;AA7CoC;;AAgDvC,eAAenB,gBAAf,C,CAEF;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA","sourcesContent":["// src/components/Credits.js\n\nimport React, {Component} from 'react';\n//import AccountBalance from './AccountBalance';\n\n\n////////////////////\n\nclass ApiDataComponent extends Component {\n    constructor(props){  // Store received data in state's \"users\" object\n      super(props);\n      this.state = {  // Initialize state with an empty users array\n        users: []\n      }\n    }\n  \n    // Make async API call to retrieve data from remote website\n    async componentDidMount() {\n      let linkToAPI = 'https://jsonplaceholder.typicode.com/users';  // Link to remote website API\n  \n      // Await for promise (completion) returned from API call\n      try {  // Accept success response as array of JSON objects (users)\n        let response = await axios.get(linkToAPI);\n        console.log(response);  // Print out response\n        // To get data object in the response, need to use \"response.data\"\n        this.setState({users: response.data});  // Store received data in state's \"users\" object\n      } \n      catch (error) {  // Print out errors at console when there is an error response\n        if (error.response) {\n          // The request was made, and the server responded with error message and status code.\n          console.log(error.response.data);  // Print out error message (e.g., Not Found)\n          console.log(error.response.status);  // Print out error status code (e.g., 404)\n        }    \n      }\n    }  \n  \n    render() {  // Parse each element in the user JSON array returned from API call\n      return (\n        <div className=\"container\">\n          {\n            this.state.users.map( (user) => {  // Extract \"id\", \"name\", and \"email\" properties of each user JSON array element\n                return (\n                  <div key={user.id}>\n                    <h3>Name {user.id}: {user.name}</h3>\n                    <h4>Email: {user.email}</h4> \n                    <p>------------------------------</p>\n                  </div>\n                )\n              }\n            )\n          }\n        </div>\n      )\n    }\n  }\n  \n  export default ApiDataComponent;\n\n///////////////////\n\n// class CreditsTracker extends Component {\n//     constructor(props) {\n//       super(props);\n//       this.state = {\n//         error: null,\n//         isLoaded: false,\n//         items: []\n//       };\n//     }\n  \n//     componentDidMount() {\n//       fetch(\"https://moj-api.herokuapp.com/credits\")\n//         .then(res => res.json())\n//         .then(\n//           (result) => {\n//             this.setState({\n//               isLoaded: true,\n//               items: false\n//             });\n//           },\n//           // Note: it's important to handle errors here\n//           // instead of a catch() block so that we don't swallow\n//           // exceptions from actual bugs in components.\n//           (error) => {\n//             this.setState({\n//               isLoaded: true,\n//               error\n//             });\n//           }\n//         )\n//     }\n  \n//     render() {\n//       const { error, isLoaded, items } = this.state;\n//       if (error) {\n//         return <div>Error: {error.message}</div>;\n//       } else if (!isLoaded) {\n//         return <div>Loading...</div>;\n//       } else {\n//         return (\n//           <ul>\n//             <h1>Credits</h1>\n//             {/* {items.map(item => (\n//               <li key={item.id}>\n//                 {item.description} {item.date}\n//               </li>\n//             ))} */}\n//           </ul>\n//         );\n//       }\n//     }\n//   }\n\n//   export default CreditsTracker;\n\n//{this.props.accountBalance} = used to keep track of changed account total\n\n//Add Credit = user input for both description and amount that is put on display\n// Date is based off current time the 'Add Credit' (possible to create 'new Date()' object and track current date with .getMonth()/.getDay(), etc)\n\n//Date is YYYY/MM/DD\n\n//Reference: \n\n"]},"metadata":{},"sourceType":"module"}