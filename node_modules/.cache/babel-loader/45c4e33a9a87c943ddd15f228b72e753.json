{"ast":null,"code":"var _jsxFileName = \"/Users/pc/Library/Mobile Documents/com~apple~CloudDocs/School/Summer 2022/CSCI 395-48/Assignment 4/Bank-of-React/src/components/Credits.js\";\n// src/components/Credits.js\nimport React, { Component } from 'react'; //import AccountBalance from './AccountBalance';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CreditsTracker extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    };\n  } // componentDidMount() {\n  //   fetch(\"https://moj-api.herokuapp.com/credits\")\n  //     .then(res => res.json())\n  //     .then(\n  //       (result) => {\n  //         this.setState({\n  //           isLoaded: true,\n  //           items: result.items\n  //         });\n  //       },\n  //       // Note: it's important to handle errors here\n  //       // instead of a catch() block so that we don't swallow\n  //       // exceptions from actual bugs in components.\n  //       (error) => {\n  //         this.setState({\n  //           isLoaded: true,\n  //           error\n  //         });\n  //       }\n  //     )\n  // }\n\n\n  render() {\n    //   const { error, isLoaded, items } = this.state;\n    //   if (error) {\n    //     return <div>Error: {error.message}</div>;\n    //   } else if (!isLoaded) {\n    //     return <div>Loading...</div>;\n    //   } else {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Credits\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), items.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [item.description, \" \", item.date]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 15\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }, this);\n  }\n\n} //   }\n\n\nexport default CreditsTracker; //{this.props.accountBalance} = used to keep track of changed account total\n//Add Credit = user input for both description and amount that is put on display\n// Date is based off current time the 'Add Credit' (possible to create 'new Date()' object and track current date with .getMonth()/.getDay(), etc)\n//Date is YYYY/MM/DD\n//Reference:","map":{"version":3,"sources":["/Users/pc/Library/Mobile Documents/com~apple~CloudDocs/School/Summer 2022/CSCI 395-48/Assignment 4/Bank-of-React/src/components/Credits.js"],"names":["React","Component","CreditsTracker","constructor","props","state","error","isLoaded","items","render","map","item","description","date","id"],"mappings":";AAAA;AAEA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B,C,CACA;;;;AAEA,MAAMC,cAAN,SAA6BD,SAA7B,CAAuC;AACnCE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,IADI;AAEXC,MAAAA,QAAQ,EAAE,KAFC;AAGXC,MAAAA,KAAK,EAAE;AAHI,KAAb;AAKD,GARkC,CAUnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,EAAAA,MAAM,GAAG;AACT;AACA;AACA;AACA;AACA;AACA;AACI,wBACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGD,KAAK,CAACE,GAAN,CAAUC,IAAI,iBACb;AAAA,mBACGA,IAAI,CAACC,WADR,OACsBD,IAAI,CAACE,IAD3B;AAAA,SAASF,IAAI,CAACG,EAAd;AAAA;AAAA;AAAA;AAAA,cADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;;AAjDgC,C,CAmDvC;;;AAEE,eAAeZ,cAAf,C,CAEF;AAEA;AACA;AAEA;AAEA","sourcesContent":["// src/components/Credits.js\n\nimport React, {Component} from 'react';\n//import AccountBalance from './AccountBalance';\n\nclass CreditsTracker extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        error: null,\n        isLoaded: false,\n        items: []\n      };\n    }\n  \n    // componentDidMount() {\n    //   fetch(\"https://moj-api.herokuapp.com/credits\")\n    //     .then(res => res.json())\n    //     .then(\n    //       (result) => {\n    //         this.setState({\n    //           isLoaded: true,\n    //           items: result.items\n    //         });\n    //       },\n    //       // Note: it's important to handle errors here\n    //       // instead of a catch() block so that we don't swallow\n    //       // exceptions from actual bugs in components.\n    //       (error) => {\n    //         this.setState({\n    //           isLoaded: true,\n    //           error\n    //         });\n    //       }\n    //     )\n    // }\n  \n    render() {\n    //   const { error, isLoaded, items } = this.state;\n    //   if (error) {\n    //     return <div>Error: {error.message}</div>;\n    //   } else if (!isLoaded) {\n    //     return <div>Loading...</div>;\n    //   } else {\n        return (\n          <ul>\n            <h1>Credits</h1>\n            {items.map(item => (\n              <li key={item.id}>\n                {item.description} {item.date}\n              </li>\n            ))}\n          </ul>\n        );\n      }\n    }\n//   }\n\n  export default CreditsTracker;\n\n//{this.props.accountBalance} = used to keep track of changed account total\n\n//Add Credit = user input for both description and amount that is put on display\n// Date is based off current time the 'Add Credit' (possible to create 'new Date()' object and track current date with .getMonth()/.getDay(), etc)\n\n//Date is YYYY/MM/DD\n\n//Reference: \n\n"]},"metadata":{},"sourceType":"module"}