{"ast":null,"code":"var _jsxFileName = \"/Users/pc/Library/Mobile Documents/com~apple~CloudDocs/School/Summer 2022/CSCI 395-48/Assignment 4/Bank-of-React/src/components/Credits.js\";\n// src/components/Credits.js\nimport axios from 'axios';\nimport React, { Component } from 'react';\nimport './Credits.css';\nimport AccountBalance from './AccountBalance';\nimport accountBalance from '../App';\nimport { Link } from 'react-router-dom';\nimport { Redirect } from 'react-router-dom';\nimport App from '../App'; ////////////////////\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ApiDataComponent extends Component {\n  constructor(props) {\n    // Store received data in state's \"users\" object\n    super(props);\n\n    this.handleChange = e => {\n      // const updatedUser = {...this.state.user}\n      // const inputField = e.target.name\n      // const inputValue = e.target.value\n      // updatedUser[inputField] = inputValue\n      // this.setState({user: updatedUser})\n      const inputValue = e.target.value;\n      this.setState({\n        creditAmount: value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      console.log(e.target.creditAmount);\n      this.setState({\n        redirect: true\n      });\n    };\n\n    this.state = {\n      // Initialize state with an empty users array\n      items: [],\n      creditAmount: 0,\n      redirect: false\n    };\n  } // Make async API call to retrieve data from remote website\n\n\n  async componentDidMount() {\n    let linkToAPI = 'https://moj-api.herokuapp.com/credits'; // Link to remote website API\n    // Await for promise (completion) returned from API call\n\n    try {\n      // Accept success response as array of JSON objects (users)\n      let response = await axios.get(linkToAPI); // console.log(response);  // Print out response\n      // To get data object in the response, need to use \"response.data\"\n\n      this.setState({\n        items: response.data\n      }); // Store received data in state's \"users\" object\n    } catch (error) {\n      // Print out errors at console when there is an error response\n      if (error.response) {\n        // The request was made, and the server responded with error message and status code.\n        console.log(error.response.data); // Print out error message (e.g., Not Found)\n\n        console.log(error.response.status); // Print out error status code (e.g., 404)\n      }\n    }\n  }\n\n  render() {\n    // Parse each element in the user JSON array returned from API call\n    if (this.state.redirect) {\n      // Redirect to \"User Profile\" page when \"Log In\" button is clicked\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [this.state.items.map(item => {\n        // Extract \"id\", \"name\", and \"email\" properties of each user JSON array element\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"$\", item.amount, \" \", item.description, \" \", item.date]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }, this)]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"Description\",\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"Amount\",\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"Total\",\n            onChange: this.handleChange,\n            value: this.state.creditAmount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Add Credit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: \"Return to Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default ApiDataComponent; ///////////////////\n//{this.props.accountBalance} = used to keep track of changed account total\n//Add Credit = user input for both description and amount that is put on display\n// Date is based off current time the 'Add Credit' (possible to create 'new Date()' object and track current date with .getMonth()/.getDay(), etc)\n//Date is YYYY/MM/DD\n//Reference:","map":{"version":3,"sources":["/Users/pc/Library/Mobile Documents/com~apple~CloudDocs/School/Summer 2022/CSCI 395-48/Assignment 4/Bank-of-React/src/components/Credits.js"],"names":["axios","React","Component","AccountBalance","accountBalance","Link","Redirect","App","ApiDataComponent","constructor","props","handleChange","e","inputValue","target","value","setState","creditAmount","handleSubmit","preventDefault","console","log","redirect","state","items","componentDidMount","linkToAPI","response","get","data","error","status","render","map","item","amount","description","date","id"],"mappings":"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","sourcesContent":["// src/components/Credits.js\n\nimport axios from 'axios';\nimport React, {Component} from 'react';\nimport './Credits.css';\nimport AccountBalance from './AccountBalance';\nimport accountBalance from '../App'\nimport {Link} from 'react-router-dom';\nimport {Redirect} from 'react-router-dom'\nimport App from '../App';\n\n\n////////////////////\n\nclass ApiDataComponent extends Component {\n    constructor(props){  // Store received data in state's \"users\" object\n      super(props);\n      this.state = {  // Initialize state with an empty users array\n        items: [],\n        creditAmount: 0,\n        redirect: false\n      }\n    }\n    \n    // Make async API call to retrieve data from remote website\n    async componentDidMount() {\n      let linkToAPI = 'https://moj-api.herokuapp.com/credits';  // Link to remote website API\n  \n      // Await for promise (completion) returned from API call\n      try {  // Accept success response as array of JSON objects (users)\n        let response = await axios.get(linkToAPI);\n        // console.log(response);  // Print out response\n        // To get data object in the response, need to use \"response.data\"\n        this.setState({items: response.data});  // Store received data in state's \"users\" object\n      } \n      catch (error) {  // Print out errors at console when there is an error response\n        if (error.response) {\n          // The request was made, and the server responded with error message and status code.\n          console.log(error.response.data);  // Print out error message (e.g., Not Found)\n          console.log(error.response.status);  // Print out error status code (e.g., 404)\n        }    \n      }\n    }  \n\n    handleChange = (e) => {\n      // const updatedUser = {...this.state.user}\n      // const inputField = e.target.name\n      // const inputValue = e.target.value\n      // updatedUser[inputField] = inputValue\n\n  \n      // this.setState({user: updatedUser})\n      const inputValue = e.target.value\n      this.setState({creditAmount: value})\n    }\n\n    // When user clicks \"Add Credit\" button, store credit date to items array\n    handleSubmit = (e) => {\n        e.preventDefault()\n\n        console.log(e.target.creditAmount)\n        this.setState({redirect: true})\n    }\n  \n    render() {  // Parse each element in the user JSON array returned from API call\n        if (this.state.redirect) {  // Redirect to \"User Profile\" page when \"Log In\" button is clicked\n            return (<Redirect to=\"/\"/>)\n          }\n      return (\n        <div className=\"container\">\n          {\n            this.state.items.map( (item) => {  // Extract \"id\", \"name\", and \"email\" properties of each user JSON array element\n                return (\n\n                        <div key={item.id}>\n                            <li>${item.amount} {item.description} {item.date}</li>\n                            <br/>\n                        </div> \n                )\n              }\n            )\n          }\n{/* <input type=\"text\" name=\"userName\" onChange={this.handleChange} value={this.state.user.userName} /> */}\n            <form onSubmit={this.handleSubmit}>\n            <div>\n                <label htmlFor=\"Description\">Description</label>\n                <input type=\"text\" name=\"Description\" />\n                <label htmlFor=\"Amount\">Amount</label>\n                <input type=\"text\" name=\"Total\"onChange={this.handleChange} value={this.state.creditAmount}/>\n            <button>Add Credit</button>\n            </div>\n            </form>\n            <Link to=\"/\">Return to Home</Link>\n        </div>\n        \n        \n      )\n      \n\n      \n    }\n  \n  }\n\n\n  export default ApiDataComponent;\n\n///////////////////\n\n//{this.props.accountBalance} = used to keep track of changed account total\n\n//Add Credit = user input for both description and amount that is put on display\n// Date is based off current time the 'Add Credit' (possible to create 'new Date()' object and track current date with .getMonth()/.getDay(), etc)\n\n//Date is YYYY/MM/DD\n\n//Reference: \n\n"]},"metadata":{},"sourceType":"module"}